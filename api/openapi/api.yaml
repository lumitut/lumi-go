openapi: 3.0.3
info:
  title: Lumi-Go Microservice API
  description: |
    RESTful API for the Lumi-Go microservice template.
    This is a lean, high-performance Go microservice designed for cloud-native deployments.
  version: 1.0.0
  contact:
    name: API Support
    email: support@lumitut.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.example.com
    description: Production server

tags:
  - name: Health
    description: Health and readiness endpoints
  - name: API
    description: Application endpoints

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Returns the health status of the service
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ready:
    get:
      tags:
        - Health
      summary: Readiness check
      description: Returns the readiness status of the service
      operationId: getReadiness
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessStatus'
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessStatus'

  /metrics:
    get:
      tags:
        - Health
      summary: Prometheus metrics
      description: Returns Prometheus-formatted metrics
      operationId: getMetrics
      responses:
        '200':
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string

  /api/v1/example:
    get:
      tags:
        - API
      summary: Example endpoint
      description: Example API endpoint - replace with your actual endpoints
      operationId: getExample
      parameters:
        - $ref: '#/components/parameters/RequestID'
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful response
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - API
      summary: Create example
      description: Example POST endpoint - replace with your actual endpoints
      operationId: createExample
      parameters:
        - $ref: '#/components/parameters/RequestID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExampleRequest'
      responses:
        '201':
          description: Created successfully
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
            Location:
              description: URL of the created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    HealthStatus:
      type: object
      required:
        - status
        - timestamp
        - service
        - version
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: healthy
        timestamp:
          type: integer
          format: int64
          example: 1234567890
        service:
          type: string
          example: lumi-go
        version:
          type: string
          example: 1.0.0
        environment:
          type: string
          example: production
        uptime:
          type: string
          example: 24h30m15s
        details:
          type: object
          additionalProperties: true

    ReadinessStatus:
      type: object
      required:
        - ready
        - timestamp
        - checks
      properties:
        ready:
          type: boolean
          example: true
        timestamp:
          type: integer
          format: int64
          example: 1234567890
        checks:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [ready, not_ready]
              message:
                type: string
        service:
          type: string
          example: lumi-go

    ExampleRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: Example Name
        description:
          type: string
          maxLength: 500
          example: Optional description
        metadata:
          type: object
          additionalProperties:
            type: string

    ExampleResponse:
      type: object
      required:
        - id
        - name
        - created_at
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Example Name
        description:
          type: string
          example: Optional description
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          example: BAD_REQUEST
        message:
          type: string
          example: Invalid request parameters
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
        request_id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time

    PaginatedResponse:
      type: object
      required:
        - items
        - total
        - limit
        - offset
      properties:
        items:
          type: array
          items: {}
        total:
          type: integer
          example: 100
        limit:
          type: integer
          example: 10
        offset:
          type: integer
          example: 0
        has_more:
          type: boolean
          example: true

  parameters:
    RequestID:
      name: X-Request-ID
      in: header
      description: Unique request identifier for tracing
      schema:
        type: string
        format: uuid

  headers:
    RequestID:
      description: Unique request identifier
      schema:
        type: string
        format: uuid

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: BAD_REQUEST
            message: Invalid request parameters
            timestamp: 2024-01-01T00:00:00Z

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: UNAUTHORIZED
            message: Authentication required
            timestamp: 2024-01-01T00:00:00Z

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: FORBIDDEN
            message: Insufficient permissions
            timestamp: 2024-01-01T00:00:00Z

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: NOT_FOUND
            message: Resource not found
            timestamp: 2024-01-01T00:00:00Z

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: CONFLICT
            message: Resource already exists
            timestamp: 2024-01-01T00:00:00Z

    TooManyRequests:
      description: Too many requests
      headers:
        Retry-After:
          description: Number of seconds to wait before retrying
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: RATE_LIMITED
            message: Too many requests
            timestamp: 2024-01-01T00:00:00Z

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: INTERNAL_ERROR
            message: An unexpected error occurred
            timestamp: 2024-01-01T00:00:00Z

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication

# Apply security globally (can be overridden at operation level)
# security:
#   - BearerAuth: []
