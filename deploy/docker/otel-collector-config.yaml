# OpenTelemetry Collector Configuration
# Reference: https://opentelemetry.io/docs/collector/configuration/

receivers:
  # OTLP receiver for traces, metrics, and logs
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://localhost:*"
            - "http://127.0.0.1:*"

  # Prometheus receiver for scraping metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'lumi-go'
          scrape_interval: 15s
          static_configs:
            - targets: ['app:9090']
              labels:
                service: 'lumi-go'
                environment: 'dev'

  # Host metrics receiver (optional - for collector host metrics)
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      disk:
      load:
      filesystem:
      memory:
      network:
      process:
      processes:

processors:
  # Batch processor to optimize data flow
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Resource processor to add/modify resource attributes
  resource:
    attributes:
      - key: environment
        value: dev
        action: upsert
      - key: service.namespace
        value: lumitut
        action: upsert
      - key: deployment.environment
        value: docker-compose
        action: insert

  # Span processor for trace processing
  span:
    name:
      from_attributes: ["http.method", "http.route"]
      separator: " "

  # Attributes processor to handle PII and sensitive data
  attributes:
    actions:
      # Remove sensitive headers
      - key: http.request.header.authorization
        action: delete
      - key: http.request.header.cookie
        action: delete
      - key: http.request.header.x-api-key
        action: delete
      # Hash user IDs for privacy
      - key: user.id
        action: hash

  # Probabilistic sampling for traces
  probabilistic_sampler:
    sampling_percentage: 10

exporters:
  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: lumi_go
    send_timestamps: true
    metric_expiration: 5m
    resource_to_telemetry_conversion:
      enabled: true

  # Jaeger exporter for traces
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Logging exporter for debugging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

  # OTLP/HTTP exporter (for external services if needed)
  otlphttp:
    endpoint: http://localhost:4318
    tls:
      insecure: true

  # File exporter for backup/debugging
  file:
    path: /tmp/otel-data.json
    rotation:
      enabled: true
      max_size: 10485760  # 10MB
      max_age: 24h
      max_backups: 3
      localtime: false

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health
    check_collector_pipeline:
      enabled: true
      interval: 5s
      exporter_failure_threshold: 5

  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

  # zPages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

  # Memory ballast for performance
  memory_ballast:
    size_mib: 256

service:
  # Extensions to enable
  extensions: [health_check, pprof, zpages, memory_ballast]

  # Pipeline definitions
  pipelines:
    # Trace pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, span, attributes, probabilistic_sampler]
      exporters: [jaeger, logging]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus, hostmetrics]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [prometheus, logging]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [logging, file]

  # Telemetry configuration for the collector itself
  telemetry:
    logs:
      level: info
      development: false
      encoding: json
      output_paths: ["stdout"]
      error_output_paths: ["stderr"]
    metrics:
      level: detailed
      address: 0.0.0.0:8888
