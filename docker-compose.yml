version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile.dev
    container_name: lumi-go-app
    ports:
      - "8080:8080"  # HTTP API
      - "8081:8081"  # gRPC/Connect RPC
      - "9090:9090"  # Prometheus metrics
      - "2345:2345"  # Delve debugger
    volumes:
      - .:/app
      - go-modules:/go/pkg/mod
    environment:
      - ENV=dev
      - LOG_LEVEL=debug
      - GIN_MODE=debug
      - PG_URL=postgres://lumigo:lumigo@postgres:5432/lumigo?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lumi-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: lumi-go-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=lumigo
      - POSTGRES_PASSWORD=lumigo
      - POSTGRES_DB=lumigo
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lumigo"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lumi-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: lumi-go-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lumi-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: lumi-go-otel
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./deploy/docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check
      - "55679:55679" # zPages
    networks:
      - lumi-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lumi-go-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./deploy/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - lumi-network
    depends_on:
      - app

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: lumi-go-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deploy/docker/grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./deploy/docker/grafana-dashboard-provider.yml:/etc/grafana/provisioning/dashboards/provider.yml
    networks:
      - lumi-network
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: lumi-go-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # HTTP collector
      - "14250:14250" # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - lumi-network

  # Migration runner (optional - runs once)
  migrate:
    image: migrate/migrate
    container_name: lumi-go-migrate
    volumes:
      - ./migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://lumigo:lumigo@postgres:5432/lumigo?sslmode=disable",
      "up"
    ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lumi-network
    profiles:
      - migration

networks:
  lumi-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  go-modules:
